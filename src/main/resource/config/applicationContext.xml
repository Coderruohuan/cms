<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
    http://www.springframework.org/schema/cache
     http://www.springframework.org/schema/cache/spring-cache.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd">
	<!-- 包扫描 -->
	<context:component-scan base-package="com.wang.*" />
	<!-- bean的四种作用域 -->
	<!-- <import resource="classpath*:/applicationContext-service.xml" /> <bean 
		id="singleClass" class="com.wang.ssmTest.BeanClass" /> <bean id="propertyClass" 
		class="com.wang.ssmTest.BeanClass" scope="prototype" /> <bean id="requsetClass" 
		class="com.wang.ssmTest.BeanClass" scope="request"/> <bean id="sessionClass" 
		class="com.wang.ssmTest.BeanClass" scope="session"/> -->

	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/wang" />
		<property name="password" value="123456" />
		<property name="user" value="root" />
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
	</bean>


	<!-- sqlSession 配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath*:mapper/*.xml" />
	</bean>

	<!-- dao 接口扫描 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 指定要扫描的包 -->
		<property name="basePackage" value="com.wang.dao" />
		<!-- mapperScannerConfigurer里有markerInterface -->
	</bean>

	<!-- 数据库配置 -->
	<!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"> 
		<property name="dataSource" ref="dataSource" /> </bean> -->
	<!-- 事务配置 -->
	<!-- 事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 配置织入@Aspectj切面 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- <bean id="transactionService" class="com.wang.serviceimpl.TransactionServiceImpl"></bean> -->

	<!-- aop配置 ,aop是命名空间，config是标签 -->
	<!-- <aop:config> 切面是个bean <aop:aspect ref="transactionService"> <aop:pointcut 
		expression="execution(* com.wang.serviceimpl.TransactionBServiceImpl.method*(..))" 
		id="mypoint" /> <aop:before method="print" pointcut-ref="mypoint" /> </aop:aspect> 
		</aop:config> <aop:config> <aop:pointcut expression="execution(* com.wang.serviceimpl.TransactionBServiceImpl.*(..))" 
		id="mypoint" /> <aop:advisor advice-ref="advisorService" pointcut-ref="mypoint"/> 
		</aop:config> -->
	<!--开启事务管理器 -->
	<tx:annotation-driven transaction-manager="transactionManager" />


	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig" />
	<!--开启缓存注解 ,cache-manager对应缓存管理器，不写默认是cacheManager -->
	<bean id="connectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="119.29.129.203" />
		<property name="poolConfig" ref="jedisPoolConfig" />
	</bean>

	<!-- StringRedisTemplate是继承了RedisTemplate<String, String>，所以用的时候也只能用RedisTemplate<String, 
		String>，用RedisTemplate<String,其他类型>是不行的 -->
	<!-- <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"> 
		<property name="connectionFactory" ref="connectionFactory" /> </bean> -->

	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="keySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>

	<!-- 基于redis 的spring cache -->
	<cache:annotation-driven cache-manager="cacheManager" />
	<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<constructor-arg ref="redisTemplate" />
	</bean>


</beans>